# @testset "OrbitsAllenSantillanHalo" begin
#     m_gal = 2.325e7*u"Msun"
#     m =1018.0*m_gal  # Msun
#     a = 2.562*u"kpc"     # kpc
#     Œõ = 200.0*u"kpc"    # kpc
#     Œ≥ = 2.0
#     pot = AllenSantillanHalo(m, a, Œõ, Œ≥)
#     for i in range(1,20)
#         w‚ÇÄ = 50*rand(6)
#         x‚ÇÄ = w‚ÇÄ[1:3]u"kpc"
#         v‚ÇÄ = w‚ÇÄ[4:6]u"km/s"
#         t_range = (0.0,100.0).*ùï¶.t
#         sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range)
#         sol‚ÇÇ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range; options=ntSolverOptions(; reltol=5.0e-12))
#         @test sol.x[end] ‚âà sol‚ÇÇ.x[end] rtol=5.0e-7
#         @test sol.v[end] ‚âà sol‚ÇÇ.v[end] rtol=5.0e-7
#     end
# end

# @testset "CircularOrbitsKepler" begin
#     m =1ùï¶.m  # Msun
#     pot = Kepler(m)
#     function evolve_Kepler_circular(pot, x‚ÇÄ, t)
#         a = sqrt(x‚ÇÄ'x‚ÇÄ)
#         T = 2œÄ‚àö(a^3/(G*pot.m))
#         n =  2œÄ/T
#         x = [ a*[cos(n*t[i]), sin(n*t[i])] for i ‚àà eachindex(t)]
#         return x
#     end
#     for i in range(1,20)
#         r = 10.0*rand()
#         x‚ÇÄ = [r, 0.0, 0.0]
#         speed = circular_velocity(pot, x‚ÇÄ)
#         v‚ÇÄ = [0.0, speed, 0.0]
#         t_range = (0.0, 10.0)
#         sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range)
#         sol‚ÇÇ = evolve_Kepler_circular(pot, x‚ÇÄ, sol.t)
#         for j ‚àà eachindex(sol.t)
#             @test sol.x[1:2, j] ‚âà sol‚ÇÇ[j] rtol=5.0e-7
#         end
#     end
# end



# """Precision test between Gala and GalacticDynamics for the NFW
# Adding `atol=0.5e-16` in both Gala and GalacticDynamics improves the precision by two orders of magnitude, only when `rtol` is already very small (`< 10^{-16}`)."""


# @testset "SingleOrbitNFWvsGala" begin
#     Œît = 0.01
#     n_step = 1000
#     t‚ÇÅ = 0.0
#     t‚ÇÇ = t‚ÇÅ + n_step*Œît
#     @show t‚ÇÇ
#     t_range = (t‚ÇÅ, t‚ÇÇ)
#     x‚ÇÄ = -50.0*SA[1,0,0]
#     v‚ÇÄ = 200.0*SA[0,1,0]
#     m = 10.0^12*ùï¶.m  # Msun
#     a = 20.0*ùï¶.l
#     pot = NFW(m, a)
#     c = concentration(pot)
#     f(x) = log(1+x)-x/(1+x)
#     m_g = m/f(c)
#     usys = gu.UnitSystem(au.kpc, au.Gyr, au.Msun, au.radian, au.kpc/au.Gyr, au.kpc/au.Gyr^2)
#     pot_Gala = gp.NFWPotential(Py(adimensional(m_g))*au.Msun, Py(adimensional(a))*au.kpc, units=usys)
#     w‚ÇÄ = gd.PhaseSpacePosition(pos=Py(x‚ÇÄ)*au.kpc, vel=Py(v‚ÇÄ)*au.kpc/au.Gyr)

#     orb‚ÇÅ = pot_Gala.integrate_orbit(w‚ÇÄ, dt=Œît*au.Gyr, t1=t‚ÇÅ, t2=t‚ÇÇ*au.Gyr,
#                                 Integrator=gi.DOPRI853Integrator,
#                                 Integrator_kwargs=Py(Dict("rtol"=>5.0e-8)))
#     orb‚ÇÇ = pot_Gala.integrate_orbit(w‚ÇÄ, dt=Œît*au.Gyr, t1=t‚ÇÅ, t2=(t‚ÇÇ)*au.Gyr,
#                                     Integrator=gi.DOPRI853Integrator,
#                                     Integrator_kwargs=Py(Dict("rtol"=>5.0e-11)))
#     orb‚ÇÉ = pot_Gala.integrate_orbit(w‚ÇÄ, dt=Œît*au.Gyr, t1=t‚ÇÅ, t2=(t‚ÇÇ)*au.Gyr,
#                                     Integrator=gi.DOPRI853Integrator,
#                                     Integrator_kwargs=Py(Dict("rtol"=>5.0e-20, "atol"=>0.5e-20)))
#     orb‚ÇÑ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range, Vern7(); options=ntSolverOptions(;reltol=5.0e-8, saveat=Œît))
#     orb‚ÇÖ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range, Vern7(); options=ntSolverOptions(;reltol=5.0e-11,saveat=Œît))
#     orb‚ÇÜ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range, Vern7(); options=ntSolverOptions(;reltol=5.0e-16, abstol=0.5e-16, saveat=Œît))
#     orb‚ÇÄ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range, Vern7(); options=ntSolverOptions(; saveat=Œît))
#     @test orb‚ÇÑ.x[1,end] ‚âà pyconvert(Float64,orb‚ÇÅ.x[-1].value)  rtol=5.0e-8
#     @test orb‚ÇÖ.x[1,end] ‚âà pyconvert(Float64,orb‚ÇÇ.x[-1].value)  rtol=5.0e-10
#     @test orb‚ÇÜ.x[1,end] ‚âà pyconvert(Float64,orb‚ÇÉ.x[-1].value)  rtol=5.0e-12
#     @test orb‚ÇÄ.x[1,end] ‚âà pyconvert(Float64,orb‚ÇÉ.x[-1].value)  rtol=5.0e-12
# end


# @testset "OrbitsNFWvsGala" begin
#     usys = gu.UnitSystem(au.kpc, au.Gyr, au.Msun, au.radian, au.kpc/au.Gyr, au.kpc/au.Gyr^2)
#     Œît = 0.01
#     n_step = 1000
#     t‚ÇÅ = 0.0
#     t‚ÇÇ = t‚ÇÅ + n_step*Œît
#     t_range = (t‚ÇÅ, t‚ÇÇ)
#     x‚ÇÄ = 30*[1,0,1]
#     v‚ÇÄ = 200*[0,1,0]
#     m = 10^12*ùï¶.m  # Msun
#     a = 20*ùï¶.l
#     pot = NFW(m, a)
#     c = concentration(pot)
#     f(x) = log(1+x)-x/(1+x)
#     m_g = m/f(c)
#     pot_Gala = gp.NFWPotential(Py(adimensional(m_g))*au.Msun, Py(adimensional(a))*au.kpc, units=usys)
#     @show pot_Gala

#     # Gala.py solution
#     w‚ÇÄ = gd.PhaseSpacePosition(pos=Py(x‚ÇÄ)*au.kpc, vel=Py(v‚ÇÄ)*au.kpc/au.Gyr)
#     orb_gala = pot_Gala.integrate_orbit(w‚ÇÄ, dt=Œît*au.Gyr, t1=t‚ÇÅ, t2=t‚ÇÇ*au.Gyr,
#             Integrator=gi.DOPRI853Integrator,Integrator_kwargs=Py(Dict("rtol"=>5.0e-14, "atol"=>0.5e-14)))
#     orb_gala_t = pyconvert(Vector{Float64}, orb_gala.t)
#     orb_gala_x = pyconvert(Vector{Float64}, orb_gala.x)
#     orb_gala_y = pyconvert(Vector{Float64}, orb_gala.y)
#     orb_gala_z = pyconvert(Vector{Float64}, orb_gala.z)
#     # GalacticDynamics.jl solution
#     sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range, Tsit5(); options=ntSolverOptions(; reltol=5.0e-14, abstol=0.5e-14,saveat=Œît))
#     orb_t = ustrip.(physical_units.(sol.t,:t))
#     orb_x = sol.x[1,:]

#     @test orb_t[end] ‚âà orb_gala_t[end] rtol=5.0e-12
#     @test orb_x[end] ‚âà orb_gala_x[end] rtol=5.0e-12

# end

# @testset "ODEcomparison_AllenSantillanHalo" begin
#     n = 7
#     m_gal = 2.325e7*u"Msun"
#     m =1018.0*m_gal  # Msun
#     a = 2.562*u"kpc"     # kpc
#     Œõ = 200.0*u"kpc"    # kpc
#     Œ≥ = 2.0
#     pot = AllenSantillanHalo(m, a, Œõ, Œ≥)
#     for i in range(1,n)
#         w‚ÇÄ = 50*rand(6)
#         x‚ÇÄ = w‚ÇÄ[1:3]
#         v‚ÇÄ = w‚ÇÄ[4:6]
#         t_range = (0.0,15.0)
#         a = @benchmark evolve($pot, $x‚ÇÄ, $v‚ÇÄ, $t_range; options=ntSolverOptions(; saveat=0.1))
#         b = @benchmark _evolve($pot, $x‚ÇÄ, $v‚ÇÄ, $t_range; options=ntSolverOptions(; saveat=0.1))
#         display(a)
#         display(b)
#         sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range; options=ntSolverOptions(; saveat=0.1))
#         sol‚ÇÇ = _evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range; options=ntSolverOptions(; saveat=0.1))
#         @test sol.x ‚âà sol‚ÇÇ.x rtol=5.0e-12
#         @test sol.v ‚âà sol‚ÇÇ.v rtol=5.0e-12
#     end
# end

@testset "OrbitsMacroParticleSystem" begin
    œµ = 5.0e-6
    n = 20
    m_p = 1.0e8
    a_p = 5.0
    m_d = 1.0e10
    a_d = 7.0
    b_d = 2.0
    m_h = 5.0e11
    a_h = 50.0
    Œît = 0.1
    pot = Vector{CompositePotential}(undef, n)
    mp_array = Vector{MacroParticle}(undef, n)
    for i in eachindex(pot)
        pot‚ÇÅ = Plummer(m_p, a_p)
        pot‚ÇÇ = MiyamotoNagaiDisk(m_d, a_d, b_d)
        pot‚ÇÉ = Hernquist(m_h, a_h)
        pot[i] = CompositePotential(pot‚ÇÅ,pot‚ÇÇ,pot‚ÇÉ)
        event = Event(5.0.+30rand(3), 20.0.+100rand(3))
        @show event
        mp_array[i] = MacroParticle(pot[i], event)
    end
    mps = MacroParticleSystem(mp_array...)
    t_span = (0., 7.)
    @set_system_trait mps GenSys
    bench = @benchmark evolve_c(GenSys(), $mps, $t_span; options=ntSolverOptions(abstol=0.5e-8, reltol=5.e-8, saveat=$Œît)) samples=10 seconds=1000
    display(bench)
    bench‚ÇÇ = @benchmark evolve($mps, $t_span; options=ntSolverOptions(abstol=0.5e-8, reltol=5.e-8, saveat=$Œît)) samples=10 seconds=1000
    display(bench‚ÇÇ)
    large_test = false
    if large_test
        @set_system_trait mps GenSys
        orbits = evolve(mps, t_span; options=ntSolverOptions(abstol=0.5e-8, reltol=5.e-8, saveat=Œît))
        @set_system_trait mps GenPerfSys
        orbits‚ÇÇ = evolve(mps, t_span; options=ntSolverOptions(abstol=0.5e-8, reltol=5.e-8, saveat=Œît))
        for i in eachindex(pot)
            for j in 1:3
                x, y = orbits[i].x[j,:], orbits‚ÇÇ[i].x[j,:]
                @test all(isapprox.(x, y, rtol=œµ))
                x, y = orbits[i].v[j,:], orbits‚ÇÇ[i].v[j,:]
                @test all(isapprox.(x, y, rtol=œµ))
                for k in eachindex(orbits[1].x[j,:])
                    x, y = orbits[i].x[j,k], orbits‚ÇÇ[i].x[j,k]
                    @test x ‚âà y  rtol=œµ
                    if abs(x-y) > max(abs(x), abs(y))*œµ
                        @show i, j, k
                        @show (x - y)/max(abs(x), abs(y))
                    end
                    x, y = orbits[i].v[j,k], orbits‚ÇÇ[i].v[j,k]
                    @test x ‚âà y  rtol=œµ
                    if abs(x-y) > max(abs(x), abs(y))*œµ
                        @show i, j, k
                        @show (x - y)/max(abs(x), abs(y))
                    end
                end
            end
        end
    end
end
