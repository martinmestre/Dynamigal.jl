@testset "OrbitsAllenSantillanHalo" begin
    m_gal = 2.325e7*u"Msun"
    m =1018.0*m_gal  # Msun
    a = 2.562*u"kpc"     # kpc
    Œõ = 200.0*u"kpc"    # kpc
    Œ≥ = 2.0
    pot = AllenSantillanHalo(m, a, Œõ, Œ≥)
    for i in range(1,20)
        w‚ÇÄ = 50*rand(6)
        x‚ÇÄ = w‚ÇÄ[1:3]u"kpc"
        v‚ÇÄ = w‚ÇÄ[4:6]u"km/s"
        t_range = (0.0,100.0).*ùï¶.t
        sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range)
        sol‚ÇÇ = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range; options=SolverConfig(reltol=5.0e-12))
        @test sol.x[end] ‚âà sol‚ÇÇ.x[end] rtol=5.0e-6
        @test sol.v[end] ‚âà sol‚ÇÇ.v[end] rtol=5.0e-6
    end
end

@testset "CircularOrbitsKepler" begin
    m =1.0ùï¶.m  # Msun
    pot = Kepler(m)
    function evolve_Kepler_circular(pot, x‚ÇÄ, t)
        a = sqrt(x‚ÇÄ'x‚ÇÄ)
        T = 2œÄ‚àö(a^3/(G*pot.m))
        n =  2œÄ/T
        x = [ a*[cos(n*t[i]), sin(n*t[i])] for i ‚àà eachindex(t)]
        return x
    end
    for i in range(1,20)
        r = 10.0*rand()
        x‚ÇÄ = [r, 0.0, 0.0]
        speed = circular_velocity(pot, x‚ÇÄ)
        v‚ÇÄ = [0.0, speed, 0.0]
        t_range = (0.0, 10.0)
        sol = evolve(pot, x‚ÇÄ, v‚ÇÄ, t_range)
        sol‚ÇÇ = evolve_Kepler_circular(pot, x‚ÇÄ, sol.t)
        for j ‚àà eachindex(sol.t)
            @test sol.x[1:2, j] ‚âà sol‚ÇÇ[j] rtol=5.0e-6
        end
    end
end