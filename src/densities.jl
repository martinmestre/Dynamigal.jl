"""Densities"""

"""Unitful acceleration generated by an a P <: AbstractPotential"""
function density(pot::P, x::Vector{<:Unitful.Length}, t::T) where {P<:AbstractPotential, T<:Unitful.Time}
    x, t = adimensional(x, t)
    return density(pot, x, t)*𝕦.ρ
end
function density(pot::P, x::Vector{<:Unitful.Length}) where {P<:AbstractPotential}
    x = adimensional(x)
    return density(pot, x)*𝕦.ρ
end

"""
    density(pot::P, x::AbstractVector{L}, t::T) where {P<:AbstractStaticPotential, L<:Real, T<:Real}
Bridge function for static potentials
"""
function density(pot::P, x::AbstractVector{L}, t::T) where {P<:AbstractStaticPotential, L<:Real, T<:Real}
    return density(pot, x)
end

"""Density of a CompositePotential"""
function density(pot::CompositePotential, x::AbstractVector{L}, t::T=0.0) where {L<:Real, T<:Real}
    ρ = zero(L)
    for p ∈ pot
        ρ += density(p, x, t)
    end
    return ρ
end


"""List of specific densities"""

"""Allen and Santillan (generalized) halo"""
"""Hernquist potential"""
"""Kepler potential"""


"""
    Miyamoto-Nagai disk density
    Bovy book: eq. 7.16.
"""
function density(pot::MiyamotoNagaiDisk, x::AbstractVector{L}) where {L<:Real}
    @unpack_MiyamotoNagaiDisk pot
    y = @view x[1:2]
    R² = dot(y,y)
    bz² = b*b + x[3]*x[3]
    bz = sqrt(bz²)
    abz = a + bz
    return (m*b²/4π)*(a*R²+(3*bz+a)*abz^2)/((R²+abz*abz)^2.5*(bz²)^1.5)
end


"""
    NFW
    Galactic Dynamics 2nd edition, Binney and Treamaine (2008)
"""
function density(pot::NFW, x::AbstractVector{L}) where {L<:Real}
    @unpack a, ρ₀ = pot
    r_a = sqrt( dot(x,x) ) / a
    return ρ₀/r_a/(1+r_a)^2
end

"""Oscillatory Kepler dependent"""

"""
    Plummer density

     /*  pars:
            - G (Gravitational constant)
            - m (mass scale)
            - b (length scale)
    */
    double r2 = q[0]*q[0] + q[1]*q[1] + q[2]*q[2];
    return 3*pars[1] / (4*M_PI*pars[2]*pars[2]*pars[2]) * pow(1 + r2/(pars[2]*pars[2]), -2.5);
    Expression from Gala
"""
function density(pot::Plummer, x::AbstractVector{L}) where {L<:Real}
    @unpack_Plummer pot
    r² = dot(x,x)
    return 3m/(4π*a^3)*(1+r²/(a*a))^(-2.5)
end


"""
    PowerLawCutoff density

    density(pot::PowerLawCutoff, r::AbstractVector{L}) where {L<:Real}
    Expression from Gala.
"""
function density(pot::PowerLawCutoff, x::AbstractVector{L}) where {L<:Real}
    @unpack_PowerLawCutoff pot
    r = sqrt( dot(x,x) )
    𝔸 = (m/2π)*c^(α-3)/gamma(0.5*(3-α))
    return 𝔸*r^(-α)*exp(-(r/c)^2)
end

function mass(pot::PowerLawCutoff, x::AbstractVector{L}) where {L<:Real}
    @unpack_PowerLawCutoff pot
    r = sqrt( dot(x,x) )
    𝔸 = (m/2π)*c^(α-3)/gamma(0.5*(3-α))
    return 2π*𝔸*c^(3-α)*gamma_inc(...)